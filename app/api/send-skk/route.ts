import { NextResponse } from 'next/server';

// –¢–æ–∫–µ–Ω –∏ —á–∞—Ç –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ .env.local
const TELEGRAM_BOT_TOKEN = '7286138169:AAEbfdElJiRFpPJ8Dw9f43BJuORgyd6mdDc';
const TELEGRAM_CHAT_ID = '683203214';
const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

export async function POST(request: Request) {
  try {
    const { phone, text } = await request.json();
    if (!phone || !text) {
      return NextResponse.json({ error: '–ü–æ–ª—è phone –∏ text –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' }, { status: 400 });
    }

    const messageText =
      `üì© *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –°–ö–ö* üì©\n\n` +
      `*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* ${phone}\n` +
      `*–°–æ–æ–±—â–µ–Ω–∏–µ:* ${text}`;

    const resp = await fetch(`${TELEGRAM_API}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: messageText,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[{ text: '–ü—Ä–∏–Ω—è—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ', callback_data: 'accept_skk' }]]
        }
      }),
    });

    if (!resp.ok) {
      const errText = await resp.text();
      console.error('Telegram API error:', errText);
      return NextResponse.json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' }, { status: 502 });
    }

    return NextResponse.json({ ok: true });
  } catch (e) {
    console.error('Internal error in send-skk:', e);
    return NextResponse.json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞' }, { status: 500 });
  }
}